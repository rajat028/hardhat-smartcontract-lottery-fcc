{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "playersCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle_UpKeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOPen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransactionFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2fe8bd9519b2dec41d705fc47660cb93a67f0da7e581e7e70d1b43666c6e127a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1196674",
    "logsBloom": "0x
    "blockHash": "0x5af0fb9e3a947bc15fd40d5fef5222e856227c02c1f9195b43763e9d977d43f6",
    "transactionHash": "0x2fe8bd9519b2dec41d705fc47660cb93a67f0da7e581e7e70d1b43666c6e127a",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1196674",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "1",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "30",
    "10000000000000000",
    "500"
  ],
  "numDeployments": 1,
  "solcInputHash": "f6fcd04e9dbaf7c92a13053a69a9a8b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle_UpKeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOPen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransactionFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between raffle runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nerror Raffle__NotEnoughETHEntered();\\nerror Raffle__TransactionFailed();\\nerror Raffle__NotOPen();\\nerror Raffle_UpKeepNotNeeded(uint balance, uint playersCount, uint raffleState);\\n\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    address payable[] private s_players;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint16 private constant NUM_WORDS = 1;\\n\\n    /* Lottery Variables */\\n    RaffleState private s_raffleState;\\n    address private s_recentWinnerAddress;\\n    uint private s_lastTimeStamp;\\n    uint256 private immutable i_entranceFee;\\n    uint256 private immutable i_interval;\\n\\n    event RaffleEnter(address indexed player);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane, // keyHash\\n        uint256 interval,\\n        uint256 entranceFee,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_interval = interval;\\n        i_subscriptionId = subscriptionId;\\n        i_entranceFee = entranceFee;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    function enterRaffle() external payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__NotEnoughETHEntered();\\n        }\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__NotOPen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    function performUpkeep(bytes calldata /* performData */) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle_UpKeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint(s_raffleState)\\n            );\\n        }\\n        s_raffleState = RaffleState.CALCULATING;\\n        uint requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    /**\\n     * @dev This is the function that the Chainlink Keeper nodes call\\n     * they look for `upkeepNeeded` to return True.\\n     * the following should be true for this to return true:\\n     * 1. The time interval has passed between raffle runs.\\n     * 2. The lottery is open.\\n     * 3. The contract has ETH.\\n     * 4. Implicity, your subscription is funded with LINK.\\n     */\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    ) public view override returns (bool upkeepNeeded, bytes memory /* performData */) {\\n        bool isOpen = RaffleState.OPEN == s_raffleState;\\n        bool timePassed = (block.timestamp - s_lastTimeStamp) >= i_interval;\\n        bool hasPlayers = (s_players.length > 0);\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (isOpen && timePassed && hasBalance && hasPlayers);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint /* requestId */,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinnerAddress = recentWinner;\\n        s_raffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Raffle__TransactionFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    function getEntranceFee() public view returns (uint) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint index) external view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() external view returns (address) {\\n        return s_recentWinnerAddress;\\n    }\\n\\n    function getRaffleState() external view returns(RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNumWords() external pure returns(uint16) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumberOfPlayers() external view returns(uint) {\\n        return s_players.length;\\n    }\\n\\n    function getLatestTimeStamp() external view returns(uint) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getRequestConfirmations() external pure returns(uint) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xc014e3ee14e7c29d376fc4e2c5145922790a8f51940cb130078f379e7a644a4f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620017db380380620017db833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508360c081815250508261014081815250508467ffffffffffffffff1660e08167ffffffffffffffff16815250508161012081815250506000600160006101000a81548160ff0219169083600181111562000101576200010062000330565b5b0217905550426002819055508063ffffffff166101008163ffffffff16815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b600067ffffffffffffffff82169050919050565b620001b78162000198565b8114620001c357600080fd5b50565b600081519050620001d781620001ac565b92915050565b6000819050919050565b620001f281620001dd565b8114620001fe57600080fd5b50565b6000815190506200021281620001e7565b92915050565b6000819050919050565b6200022d8162000218565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001c6565b9550506040620002ea89828a0162000201565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200023c565b92505060a06200032389828a016200027d565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611413620003c860003960006107990152600081816102b401526103b10152600061065f0152600061063c0152600061061b015260006105df0152600081816102f1015261034501526114136000f3fe6080604052600436106100a75760003560e01c8063473f1ddc11610064578063473f1ddc1461018957806353a2c19a146101b45780635f1b0fd8146101df5780636e04ff0d1461020a578063e55ae4e814610248578063fd6673f514610285576100a7565b806309bc33a7146100ac578063115cbaf5146100d75780631fe543e3146101025780632cfcc5391461012b578063320229eb146101355780634585e33b14610160575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce9190610b47565b60405180910390f35b3480156100e357600080fd5b506100ec6102d8565b6040516100f99190610bd9565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190610d8d565b6102ef565b005b6101336103af565b005b34801561014157600080fd5b5061014a61051e565b6040516101579190610b47565b60405180910390f35b34801561016c57600080fd5b5061018760048036038101906101829190610e44565b610528565b005b34801561019557600080fd5b5061019e610718565b6040516101ab9190610ed2565b60405180910390f35b3480156101c057600080fd5b506101c9610740565b6040516101d69190610f0a565b60405180910390f35b3480156101eb57600080fd5b506101f4610749565b6040516102019190610b47565b60405180910390f35b34801561021657600080fd5b50610231600480360381019061022c9190610fda565b610756565b60405161023f9291906110bd565b60405180910390f35b34801561025457600080fd5b5061026f600480360381019061026a91906110ed565b610804565b60405161027c9190610ed2565b60405180910390f35b34801561029157600080fd5b5061029a61084b565b6040516102a79190610b47565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161039892919061111a565b60405180910390fd5b6103ab8282610857565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610409576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561041d5761041c610b62565b5b600160009054906101000a900460ff16600181111561043f5761043e610b62565b5b14610476576040517fdfec6cec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b600061054260405180602001604052806000815250610756565b509050806105b15747600080549050600160009054906101000a900460ff16600181111561057357610572610b62565b5b6040517fc61de3e10000000000000000000000000000000000000000000000000000000081526004016105a893929190611143565b60405180910390fd5b60018060006101000a81548160ff021916908360018111156105d6576105d5610b62565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106a0959493929190611210565b6020604051808303816000875af11580156106bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e39190611278565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001905090565b6000600361ffff16905090565b600060606000600160009054906101000a900460ff16600181111561077e5761077d610b62565b5b6000600181111561079257610791610b62565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426107c691906112d4565b10159050600080600080549050119050600080471190508380156107e75750825b80156107f05750805b80156107f95750815b955050505050915091565b600080828154811061081957610818611308565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b600080805490508260008151811061087257610871611308565b5b60200260200101516108849190611366565b9050600080828154811061089b5761089a611308565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548160ff0219169083600181111561092e5761092d610b62565b5b0217905550600067ffffffffffffffff81111561094e5761094d610c4a565b5b60405190808252806020026020018201604052801561097c5781602001602082028036833780820191505090505b5060009080519060200190610992929190610a87565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff16476040516109c0906113c8565b60006040518083038185875af1925050503d80600081146109fd576040519150601f19603f3d011682016040523d82523d6000602084013e610a02565b606091505b5050905080610a3d576040517f8dea0f0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b00579160200282015b82811115610aff5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610aa7565b5b509050610b0d9190610b11565b5090565b5b80821115610b2a576000816000905550600101610b12565b5090565b6000819050919050565b610b4181610b2e565b82525050565b6000602082019050610b5c6000830184610b38565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610ba257610ba1610b62565b5b50565b6000819050610bb382610b91565b919050565b6000610bc382610ba5565b9050919050565b610bd381610bb8565b82525050565b6000602082019050610bee6000830184610bca565b92915050565b6000604051905090565b600080fd5b600080fd5b610c1181610b2e565b8114610c1c57600080fd5b50565b600081359050610c2e81610c08565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c8282610c39565b810181811067ffffffffffffffff82111715610ca157610ca0610c4a565b5b80604052505050565b6000610cb4610bf4565b9050610cc08282610c79565b919050565b600067ffffffffffffffff821115610ce057610cdf610c4a565b5b602082029050602081019050919050565b600080fd5b6000610d09610d0484610cc5565b610caa565b90508083825260208201905060208402830185811115610d2c57610d2b610cf1565b5b835b81811015610d555780610d418882610c1f565b845260208401935050602081019050610d2e565b5050509392505050565b600082601f830112610d7457610d73610c34565b5b8135610d84848260208601610cf6565b91505092915050565b60008060408385031215610da457610da3610bfe565b5b6000610db285828601610c1f565b925050602083013567ffffffffffffffff811115610dd357610dd2610c03565b5b610ddf85828601610d5f565b9150509250929050565b600080fd5b60008083601f840112610e0457610e03610c34565b5b8235905067ffffffffffffffff811115610e2157610e20610de9565b5b602083019150836001820283011115610e3d57610e3c610cf1565b5b9250929050565b60008060208385031215610e5b57610e5a610bfe565b5b600083013567ffffffffffffffff811115610e7957610e78610c03565b5b610e8585828601610dee565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ebc82610e91565b9050919050565b610ecc81610eb1565b82525050565b6000602082019050610ee76000830184610ec3565b92915050565b600061ffff82169050919050565b610f0481610eed565b82525050565b6000602082019050610f1f6000830184610efb565b92915050565b600080fd5b600067ffffffffffffffff821115610f4557610f44610c4a565b5b610f4e82610c39565b9050602081019050919050565b82818337600083830152505050565b6000610f7d610f7884610f2a565b610caa565b905082815260208101848484011115610f9957610f98610f25565b5b610fa4848285610f5b565b509392505050565b600082601f830112610fc157610fc0610c34565b5b8135610fd1848260208601610f6a565b91505092915050565b600060208284031215610ff057610fef610bfe565b5b600082013567ffffffffffffffff81111561100e5761100d610c03565b5b61101a84828501610fac565b91505092915050565b60008115159050919050565b61103881611023565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561107857808201518184015260208101905061105d565b60008484015250505050565b600061108f8261103e565b6110998185611049565b93506110a981856020860161105a565b6110b281610c39565b840191505092915050565b60006040820190506110d2600083018561102f565b81810360208301526110e48184611084565b90509392505050565b60006020828403121561110357611102610bfe565b5b600061111184828501610c1f565b91505092915050565b600060408201905061112f6000830185610ec3565b61113c6020830184610ec3565b9392505050565b60006060820190506111586000830186610b38565b6111656020830185610b38565b6111726040830184610b38565b949350505050565b6000819050919050565b61118d8161117a565b82525050565b600067ffffffffffffffff82169050919050565b6111b081611193565b82525050565b600063ffffffff82169050919050565b6111cf816111b6565b82525050565b6000819050919050565b60006111fa6111f56111f084610eed565b6111d5565b6111b6565b9050919050565b61120a816111df565b82525050565b600060a0820190506112256000830188611184565b61123260208301876111a7565b61123f6040830186610efb565b61124c60608301856111c6565b6112596080830184611201565b9695505050505050565b60008151905061127281610c08565b92915050565b60006020828403121561128e5761128d610bfe565b5b600061129c84828501611263565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112df82610b2e565b91506112ea83610b2e565b9250828203905081811115611302576113016112a5565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061137182610b2e565b915061137c83610b2e565b92508261138c5761138b611337565b5b828206905092915050565b600081905092915050565b50565b60006113b2600083611397565b91506113bd826113a2565b600082019050919050565b60006113d3826113a5565b915081905091905056fea2646970667358221220c636a0eb7016848ebd98a45d7f9477cc537fa155b2ca7fc5b571f95918edaddb64736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c8063473f1ddc11610064578063473f1ddc1461018957806353a2c19a146101b45780635f1b0fd8146101df5780636e04ff0d1461020a578063e55ae4e814610248578063fd6673f514610285576100a7565b806309bc33a7146100ac578063115cbaf5146100d75780631fe543e3146101025780632cfcc5391461012b578063320229eb146101355780634585e33b14610160575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce9190610b47565b60405180910390f35b3480156100e357600080fd5b506100ec6102d8565b6040516100f99190610bd9565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190610d8d565b6102ef565b005b6101336103af565b005b34801561014157600080fd5b5061014a61051e565b6040516101579190610b47565b60405180910390f35b34801561016c57600080fd5b5061018760048036038101906101829190610e44565b610528565b005b34801561019557600080fd5b5061019e610718565b6040516101ab9190610ed2565b60405180910390f35b3480156101c057600080fd5b506101c9610740565b6040516101d69190610f0a565b60405180910390f35b3480156101eb57600080fd5b506101f4610749565b6040516102019190610b47565b60405180910390f35b34801561021657600080fd5b50610231600480360381019061022c9190610fda565b610756565b60405161023f9291906110bd565b60405180910390f35b34801561025457600080fd5b5061026f600480360381019061026a91906110ed565b610804565b60405161027c9190610ed2565b60405180910390f35b34801561029157600080fd5b5061029a61084b565b6040516102a79190610b47565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161039892919061111a565b60405180910390fd5b6103ab8282610857565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610409576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561041d5761041c610b62565b5b600160009054906101000a900460ff16600181111561043f5761043e610b62565b5b14610476576040517fdfec6cec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b600061054260405180602001604052806000815250610756565b509050806105b15747600080549050600160009054906101000a900460ff16600181111561057357610572610b62565b5b6040517fc61de3e10000000000000000000000000000000000000000000000000000000081526004016105a893929190611143565b60405180910390fd5b60018060006101000a81548160ff021916908360018111156105d6576105d5610b62565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106a0959493929190611210565b6020604051808303816000875af11580156106bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e39190611278565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001905090565b6000600361ffff16905090565b600060606000600160009054906101000a900460ff16600181111561077e5761077d610b62565b5b6000600181111561079257610791610b62565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426107c691906112d4565b10159050600080600080549050119050600080471190508380156107e75750825b80156107f05750805b80156107f95750815b955050505050915091565b600080828154811061081957610818611308565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b600080805490508260008151811061087257610871611308565b5b60200260200101516108849190611366565b9050600080828154811061089b5761089a611308565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548160ff0219169083600181111561092e5761092d610b62565b5b0217905550600067ffffffffffffffff81111561094e5761094d610c4a565b5b60405190808252806020026020018201604052801561097c5781602001602082028036833780820191505090505b5060009080519060200190610992929190610a87565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff16476040516109c0906113c8565b60006040518083038185875af1925050503d80600081146109fd576040519150601f19603f3d011682016040523d82523d6000602084013e610a02565b606091505b5050905080610a3d576040517f8dea0f0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b00579160200282015b82811115610aff5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610aa7565b5b509050610b0d9190610b11565b5090565b5b80821115610b2a576000816000905550600101610b12565b5090565b6000819050919050565b610b4181610b2e565b82525050565b6000602082019050610b5c6000830184610b38565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610ba257610ba1610b62565b5b50565b6000819050610bb382610b91565b919050565b6000610bc382610ba5565b9050919050565b610bd381610bb8565b82525050565b6000602082019050610bee6000830184610bca565b92915050565b6000604051905090565b600080fd5b600080fd5b610c1181610b2e565b8114610c1c57600080fd5b50565b600081359050610c2e81610c08565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c8282610c39565b810181811067ffffffffffffffff82111715610ca157610ca0610c4a565b5b80604052505050565b6000610cb4610bf4565b9050610cc08282610c79565b919050565b600067ffffffffffffffff821115610ce057610cdf610c4a565b5b602082029050602081019050919050565b600080fd5b6000610d09610d0484610cc5565b610caa565b90508083825260208201905060208402830185811115610d2c57610d2b610cf1565b5b835b81811015610d555780610d418882610c1f565b845260208401935050602081019050610d2e565b5050509392505050565b600082601f830112610d7457610d73610c34565b5b8135610d84848260208601610cf6565b91505092915050565b60008060408385031215610da457610da3610bfe565b5b6000610db285828601610c1f565b925050602083013567ffffffffffffffff811115610dd357610dd2610c03565b5b610ddf85828601610d5f565b9150509250929050565b600080fd5b60008083601f840112610e0457610e03610c34565b5b8235905067ffffffffffffffff811115610e2157610e20610de9565b5b602083019150836001820283011115610e3d57610e3c610cf1565b5b9250929050565b60008060208385031215610e5b57610e5a610bfe565b5b600083013567ffffffffffffffff811115610e7957610e78610c03565b5b610e8585828601610dee565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ebc82610e91565b9050919050565b610ecc81610eb1565b82525050565b6000602082019050610ee76000830184610ec3565b92915050565b600061ffff82169050919050565b610f0481610eed565b82525050565b6000602082019050610f1f6000830184610efb565b92915050565b600080fd5b600067ffffffffffffffff821115610f4557610f44610c4a565b5b610f4e82610c39565b9050602081019050919050565b82818337600083830152505050565b6000610f7d610f7884610f2a565b610caa565b905082815260208101848484011115610f9957610f98610f25565b5b610fa4848285610f5b565b509392505050565b600082601f830112610fc157610fc0610c34565b5b8135610fd1848260208601610f6a565b91505092915050565b600060208284031215610ff057610fef610bfe565b5b600082013567ffffffffffffffff81111561100e5761100d610c03565b5b61101a84828501610fac565b91505092915050565b60008115159050919050565b61103881611023565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561107857808201518184015260208101905061105d565b60008484015250505050565b600061108f8261103e565b6110998185611049565b93506110a981856020860161105a565b6110b281610c39565b840191505092915050565b60006040820190506110d2600083018561102f565b81810360208301526110e48184611084565b90509392505050565b60006020828403121561110357611102610bfe565b5b600061111184828501610c1f565b91505092915050565b600060408201905061112f6000830185610ec3565b61113c6020830184610ec3565b9392505050565b60006060820190506111586000830186610b38565b6111656020830185610b38565b6111726040830184610b38565b949350505050565b6000819050919050565b61118d8161117a565b82525050565b600067ffffffffffffffff82169050919050565b6111b081611193565b82525050565b600063ffffffff82169050919050565b6111cf816111b6565b82525050565b6000819050919050565b60006111fa6111f56111f084610eed565b6111d5565b6111b6565b9050919050565b61120a816111df565b82525050565b600060a0820190506112256000830188611184565b61123260208301876111a7565b61123f6040830186610efb565b61124c60608301856111c6565b6112596080830184611201565b9695505050505050565b60008151905061127281610c08565b92915050565b60006020828403121561128e5761128d610bfe565b5b600061129c84828501611263565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112df82610b2e565b91506112ea83610b2e565b9250828203905081811115611302576113016112a5565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061137182610b2e565b915061137c83610b2e565b92508261138c5761138b611337565b5b828206905092915050565b600081905092915050565b50565b60006113b2600083611397565b91506113bd826113a2565b600082019050919050565b60006113d3826113a5565b915081905091905056fea2646970667358221220c636a0eb7016848ebd98a45d7f9477cc537fa155b2ca7fc5b571f95918edaddb64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between raffle runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1164,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1177,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "1",
        "type": "t_enum(RaffleState)1156"
      },
      {
        "astId": 1179,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinnerAddress",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1181,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)1156": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}